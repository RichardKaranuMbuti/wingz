1. # Create new user

curl -X POST http://localhost:8000/api/register/ \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123!",
    "username": "admin",
    "first_name": "Admin",
    "last_name": "User",
    "phone_number": "1234567890",
    "role": "admin"
  }'


2.  # Get token

curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123!"
  }'


3. # Save ride info

# 3. Create sample rides
curl -X POST http://localhost:8000/api/rides/ \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzMyNzM3NDIyLCJpYXQiOjE3MzI3MzcxMjIsImp0aSI6IjIzZTJiY2RlYTc3ZjQzMzc4M2FjYTIyOTFjOTBmYTQ3IiwidXNlcl9pZCI6MSwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiJ9.xvRErbO9vVbybVUwayDzgtSkgrdkerfZAGFHwCI7H34" \
  -H "Content-Type: application/json" \
  -d '{
    "status": "en-route",
    "id_rider": 2,
    "id_driver": 3,
    "pickup_latitude": 37.7749,
    "pickup_longitude": -122.4194,
    "dropoff_latitude": 37.7858,
    "dropoff_longitude": -122.4064,
    "pickup_time": "2024-03-27T14:30:00Z"
  }'






##############################################################

# 1. Create admin user first
curl -X POST http://localhost:8000/api/users/ \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123!",
    "username": "admin",
    "first_name": "Admin",
    "last_name": "User",
    "phone_number": "1234567890",
    "role": "admin"
  }'

# 2. Get authentication token
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123!"
  }'

# 3. Create sample rides
curl -X POST http://localhost:8000/api/rides/ \
  -H "Authorization: Bearer <your_token>" \
  -H "Content-Type: application/json" \
  -d '{
    "status": "en-route",
    "id_rider": 2,
    "id_driver": 3,
    "pickup_latitude": 37.7749,
    "pickup_longitude": -122.4194,
    "dropoff_latitude": 37.7858,
    "dropoff_longitude": -122.4064,
    "pickup_time": "2024-03-27T14:30:00Z"
  }'

# API Endpoints Documentation

1. List Rides
GET http://localhost:8000/api/rides/
Parameters:
- page: integer (default=1)
- page_size: integer (default=10, max=100)
- status: string (en-route, pickup, dropoff)
- rider_email: string
- sort_by: string (pickup_time, distance)
- latitude: float (required if sort_by=distance)
- longitude: float (required if sort_by=distance)

Headers:
- Authorization: Bearer <token>

2. Create Ride
POST http://localhost:8000/api/rides/
Headers:
- Authorization: Bearer <token>
- Content-Type: application/json

Body:
{
    "status": "en-route",
    "id_rider": integer,
    "id_driver": integer,
    "pickup_latitude": float,
    "pickup_longitude": float,
    "dropoff_latitude": float,
    "dropoff_longitude": float,
    "pickup_time": "YYYY-MM-DDTHH:MM:SSZ"
}

3. Update Ride
PUT/PATCH http://localhost:8000/api/rides/{id}/
Headers:
- Authorization: Bearer <token>
- Content-Type: application/json

Body: Same as create, all fields optional for PATCH

4. Delete Ride
DELETE http://localhost:8000/api/rides/{id}/
Headers:
- Authorization: Bearer <token>

# Postman Collection Setup

1. Create a new collection "Ride API"

2. Set up environment variables:
- base_url: http://localhost:8000
- token: <your_auth_token>

3. Create requests:

Authentication:
- Method: POST
- URL: {{base_url}}/api/token/
- Body (raw/JSON):
{
    "email": "admin@example.com",
    "password": "admin123!"
}

List Rides:
- Method: GET
- URL: {{base_url}}/api/rides/
- Auth: Bearer Token {{token}}
- Params: Add as needed (status, rider_email, etc.)

Create Ride:
- Method: POST
- URL: {{base_url}}/api/rides/
- Auth: Bearer Token {{token}}
- Body: Use sample from curl commands

Update Ride:
- Method: PATCH
- URL: {{base_url}}/api/rides/1/
- Auth: Bearer Token {{token}}
- Body: Include only fields to update

Delete Ride:
- Method: DELETE
- URL: {{base_url}}/api/rides/1/
- Auth: Bearer Token {{token}}